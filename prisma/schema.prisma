// Prisma schema for ContentCraft authentication
// Includes User, Account (for OAuth), and Session models

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String   @id @default(cuid())
  name              String?
  email             String   @unique
  emailVerified     DateTime?
  password          String?  // null for OAuth users
  image             String?
  hasCompletedSetup Boolean  @default(false)

  // Setup wizard information
  company           String?
  role              String?
  industry          String?
  niche             String?
  audienceDesc      String?
  keywords          String?
  bio               String?

  // Preferences
  emailNotifications Boolean @default(true)
  contentReminders   Boolean @default(true)
  analyticsReports   Boolean @default(true)

  // Relations
  accounts          Account[]
  sessions          Session[]
  audience          UserAudience[]
  brandVoice        UserBrandVoice[]
  interests         UserInterest[]
  posts             Post[]

  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model UserAudience {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  audience  String

  @@unique([userId, audience])
}

model UserBrandVoice {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  voice     String

  @@unique([userId, voice])
}

model UserInterest {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  interest  String

  @@unique([userId, interest])
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expires      DateTime
}

model Post {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  platform  String
  content   String
  createdAt DateTime @default(now())
}
